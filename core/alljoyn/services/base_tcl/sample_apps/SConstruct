# Copyright (c) 2013 - 2014, AllSeen Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import os.path
ajtcl_root_default = '../../../core/ajtcl'
ajtcl_root = ARGUMENTS.get('AJ_TCL_ROOT', ajtcl_root_default)
if not os.path.isfile(ajtcl_root + '/SConscript'):
    print "SConscript in 'AJ_TCL_ROOT=" + ajtcl_root + "' not found; aborting.\n"
    exit(1)

env = SConscript(ajtcl_root + '/SConscript')
if env['VARIANT'] == 'debug':
    env.Append(CPPDEFINES = ['ER_DEBUG_AJSVCAPP=1'])
    env.Append(CPPDEFINES = ['ER_DEBUG_AJSVCALL=1'])
    env.Append(CPPDEFINES = ['AJ_DEBUG_RESTRICT=AJ_DEBUG_INFO'])

env.Append(CPPDEFINES = ['AJ_NUM_REPLY_CONTEXTS=2', 'AJ_MAX_OBJECT_LISTS=8'])

env.Append(CPPPATH = [Dir('AppsCommon/inc')])
env.Append(CPPPATH = [Dir('AppsCommon/target/' + env['TARG'])])
env.Append(CPPPATH = [Dir('../config/inc')])
env.Append(CPPPATH = [Dir('../notification/inc')])
env.Append(CPPPATH = [Dir('../controlpanel/inc')])
env.Append(CPPPATH = [Dir('.')])

samples = ['ConfigSample', 'NotificationProducerSample', 'NotificationConsumerSample', 'ControlleeSample']

for sample in samples:
    print ''
    print '                     handling sample:' + sample
    print '=================================================================='
    env['variant_dirs'] = sample
    samp_env = env.Clone()
    env.SConscript('SConscript', variant_dir = 'obj/' + samp_env['variant_dirs'], duplicate = 1, exports = 'samp_env')
