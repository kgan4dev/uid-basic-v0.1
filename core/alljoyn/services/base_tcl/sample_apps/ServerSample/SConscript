# Copyright (c) 2013 - 2014, AllSeen Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# sample usage:
# scons ALL=1 TARG=linux WS=off VARIANT=debug 
# scons PRODUCER=1 CONSUMER=1 CONFIG=1 CPS=1 TARG=linux WS=off VARIANT=debug 
# defaults:
# ALL=0
# CONFIG=1
# PRODUCER=0
# CONSUMER=0
# CPS=0

import os

Import('env')

vars = Variables()

sersamp_env = env.Clone()

Export('sersamp_env')

if sersamp_env['VARIANT'] == 'debug':
    sersamp_env.Append(CPPDEFINES = ['ER_DEBUG_AJSVCAPP=1'])
    sersamp_env.Append(CPPDEFINES = ['ER_DEBUG_AJSVCALL=1'])
    sersamp_env.Append(CPPDEFINES = ['AJ_DEBUG_RESTRICT=AJ_DEBUG_INFO'])

sersamp_env.Append(CPPPATH = [Dir('../')])
sersamp_env.Append(CPPPATH = [Dir('../../AppsCommon/inc')])
sersamp_env.Append(CPPPATH = [Dir('../../AppsCommon/target/' + sersamp_env['TARG'])])

# build the service sample, based on command-line args
build_config_default      = 0 # do     build by default
build_producer_default    = 0 # do NOT build by default
build_consumer_default    = 0 # do NOT build by default
build_cps_default         = 0 # do NOT build by default

build_all = ARGUMENTS.get('ALL', 0)
if int(build_all):
    build_config    = 1
    build_producer  = 1
    build_consumer  = 1
    build_cps       = 1
else:
    build_config    = ARGUMENTS.get('CONFIG',      build_config_default)
    build_producer  = ARGUMENTS.get('PRODUCER',    build_producer_default)
    build_consumer  = ARGUMENTS.get('CONSUMER',    build_consumer_default)
    build_cps       = ARGUMENTS.get('CPS',         build_cps_default)

if int(build_producer) and not int(build_consumer) and not int(build_cps):
    main_exe = 'NotificationProducerSample'
else:
    if int(build_consumer) and not int(build_producer) and not int(build_cps):
        main_exe = 'NotificationConsumerSample'
    else:
        if int(build_cps) and not int(build_consumer) and not int(build_producer):
            main_exe = 'ControlleeSample'
        else:
            main_exe = 'ServerSample'

srcs = ['ServerSample.c']

objs = []
common_samples_srcs = ['AppHandlers.c']

if int(build_config):
    common_samples_srcs.extend(['ConfigSample.c'])
    objs.extend(sersamp_env.SConscript('../../../config/SConscript', {'config_env': sersamp_env}))

if int(build_producer) or int(build_consumer):
    objs.extend(SConscript('../../../notification/src/NotificationCommon/SConscript', variant_dir = '../../../notification/src/NotificationCommon/obj', duplicate = 0, exports = {'notif_env': sersamp_env}))

if int(build_producer):
    srcs.extend(['SimpleNotificationProducerSample.c', '../../AppsCommon/target/' + sersamp_env['TARG'] + '/NotificationProducerSampleUtil.c'])
    objs.extend(SConscript('../../../notification/src/NotificationProducer/SConscript', variant_dir = '../../../notification/src/NotificationProducer/obj', duplicate = 0, exports = {'notif_env': sersamp_env}))

if int(build_consumer):
    srcs.extend(['SimpleNotificationConsumerSample.c', '../../AppsCommon/target/'  + sersamp_env['TARG'] + '/NotificationConsumerSampleUtil.c'])
    objs.extend(SConscript('../../../notification/src/NotificationConsumer/SConscript', variant_dir = '../../../notification/src/NotificationConsumer/obj', duplicate = 0, exports = {'notif_env': sersamp_env}))

if int(build_cps):
    srcs.extend(['ControlPanelGenerated.c', 'ControlPanelProvided.c', 'ControlPanelSample.c'])
    objs.extend(SConscript('../../../controlpanel/SConscript', {'cps_env': sersamp_env}))

objs.extend(sersamp_env.Object(srcs))

sersamp_env['common_samples_srcs'] = common_samples_srcs
objs.extend(sersamp_env.SConscript('../../AppsCommon/SConscript', variant_dir = 'AppsCommon', duplicate = 1, exports = {'appsCommon_env': sersamp_env}))

objs.extend(sersamp_env.SConscript('../../../services_common/SConscript', variant_dir = 'services_common', duplicate = 1, exports = {'services_common_env': sersamp_env}))

prog = sersamp_env.Program(
    target = main_exe,
    source = [
              objs,
              sersamp_env['aj_obj'],
    ]
 )
sersamp_env.Install('../build', prog)
