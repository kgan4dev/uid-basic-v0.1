import os
import platform

vars = Variables()

# Common build variables
vars.Add(EnumVariable('VARIANT', 'Build variant', 'debug', allowed_values=('debug', 'release')))
vars.Add('AJTCL_ROOT', 'Directory containing AllJoyn Thin Core Library', None)

env = Environment(variables = vars)
Help(vars.GenerateHelpText(env))

if os.environ.has_key('TARGET_CC_NOCACHE'):
    env.Replace(CC = os.environ['TARGET_CC_NOCACHE'])
if os.environ.has_key('TARGET_CXX_NOCACHE'):
    env.Replace(CXX = os.environ['TARGET_CXX_NOCACHE'])
if os.environ.has_key('TARGET_LINK'):
    env.Replace(LINK = os.environ['TARGET_LINK'])
if os.environ.has_key('STAGING_DIR'):
    env['ENV']['STAGING_DIR'] = os.environ.get('STAGING_DIR', '')
if os.environ.has_key('TARGET_PATH'):
    env['ENV']['PATH'] = ':'.join([ os.environ['TARGET_PATH'], env['ENV']['PATH'] ] )
if os.environ.has_key('TARGET_CFLAGS'):
    env.Append(CFLAGS=os.environ['TARGET_CFLAGS'].split())
    env.Append(CXXFLAGS=os.environ['TARGET_CFLAGS'].split())
if os.environ.has_key('EXTRA_CFLAGS'):
    env.Append(CFLAGS=os.environ['EXTRA_CFLAGS'].split())
    env.Append(CXXFLAGS=os.environ['EXTRA_CFLAGS'].split())
if os.environ.has_key('TARGET_CPPFLAGS'):
    env.Append(CFLAGS=os.environ['TARGET_CPPFLAGS'].split())
    env.Append(CXXFLAGS=os.environ['TARGET_CPPFLAGS'].split())
if os.environ.has_key('TARGET_LINKFLAGS'):
    env.Append(LINKFLAGS=os.environ['TARGET_LINKFLAGS'].split())
if os.environ.has_key('TARGET_LDFLAGS'):
    env.Append(LDFLAGS=os.environ['TARGET_LDFLAGS'].split())

env.AppendUnique(CFLAGS=['-Wall',
                         '-pipe',
                         '-funsigned-char',
                         '-Wpointer-sign',
                         '-Wimplicit-function-declaration',
                         '-fno-strict-aliasing'])
env.AppendUnique(CXXFLAGS=['-Wall',
                           '-pipe',
                           '-funsigned-char',
                           '-fno-strict-aliasing'])

if env['VARIANT'] == 'debug':
    env.Append(CFLAGS='-g')
    env.Append(CXXFLAGS='-g')
else:
    env.Append(CFLAGS='-Os')
    env.Append(CXXFLAGS='-Os')
    env.Append(CPPDEFINES=['NDEBUG'])
    env.Append(LINKFLAGS='-s')

env.Append(LIBS = ['ajtcl'])

env['build_shared'] = (platform.system() == 'Linux')

env['shared_objs'] = []
env['static_objs'] = []
env['progs'] = []

if env.has_key('AJTCL_ROOT') and env['AJTCL_ROOT'] and os.path.exists(env['AJTCL_ROOT']):
    env.Append(LIBPATH=[env.Dir(env['AJTCL_ROOT'])])
    env.Append(CPPPATH=[env.Dir(os.path.join(env['AJTCL_ROOT'], 'inc')),
                        env.Dir(os.path.join(env['AJTCL_ROOT'], 'target', 'linux'))])


Export('env')

env.SConscript('config/SConscript.openwrt')
env.SConscript('controlpanel/SConscript.openwrt')
env.SConscript('notification/SConscript.openwrt')
env.SConscript('services_common/SConscript.openwrt')

if env['shared_objs']:
    env.SharedLibrary("ajtcl_services", env['shared_objs'])
env.Library("ajtcl_services", env['static_objs'])
